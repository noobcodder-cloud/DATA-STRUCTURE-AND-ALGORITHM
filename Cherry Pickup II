class Solution{
    
    public int cherryPickup(int[][] arr){
        
        int n = arr.length, m = arr[0].length; 
        int [][][]dp = new int[n][m][m];
        
        for(int i=0; i<n; i++){ 
            for(int j=0; j<m; j++){
                for(int k=0; k<m; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        
        return dfs(0, 0, m-1, dp, arr);
        
    }
    
    public static int dfs(int r, int c1, int c2, int[][][]dp, int arr[][]){
        
        int n = arr.length, m = arr[0].length; 
        
        if(r>=n || c1>=m || c2>=m || c1<0 || c2<0) return 0;
        if(dp[r][c1][c2] != -1){return dp[r][c1][c2];}
        
        int max = arr[r][c1], temp = 0;
        
        if(c1 != c2) max += arr[r][c2];a
        
        if(r != n-1){
            
            for(int newC1 = c1-1; newC1 <= c1+1; newC1++){
                for(int newC2 = c2-1; newC2 <= c2+1; newC2++){
                    temp = Math.max(temp, dfs(r+1, newC1, newC2, dp, arr));
                }
            }
            
        }
        max += temp;
        dp[r][c1][c2] = max;
        return max;
    }
    
}
